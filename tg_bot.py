from textwrap import dedent

import requests
from enum import Enum, auto
from environs import Env
from time import sleep
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler

import logging

logger = logging.getLogger(__name__)


class States(Enum):
    MAIN = auto()
    REQUEST = auto()


def start(update, context):

    keyboard = [
        ['‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'],
        ['‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!',
        reply_markup=reply_markup,
    )

    return States.MAIN


def main_menu(update, context):
    keyboard = [
        ['‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'],
        ['‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_message(
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!',
        chat_id=update.effective_chat.id,
        reply_markup=reply_markup,
    )

    return States.MAIN


def phone_request(update, context):
    keyboard = [
        [KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)],
        ['–ì–æ—Å—Ç–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–±–µ–∑ –≤—Ö–æ–¥–∞)', '–û—Ç–º–µ–Ω–∞'],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ, –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
        reply_markup=reply_markup,
    )

    return States.REQUEST


def get_api_respone(update, context):
    phone_number = update.message.contact.phone_number
    chat_id = update.message.chat_id
    username = update.message.chat.username

    api_url = context.bot_data['api_url']
    payload = {
         'phone': phone_number,
         'chat_id': chat_id,
         'username': username
    }
    response = requests.post(api_url, data=payload)
    response.raise_for_status()
    user_status = response.json()

    if 'register' in user_status:
        text = dedent('''
        üì± –ü–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n
        –ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ *—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é* –∏ –Ω–∞ 
        *–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ/—Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞* üëá\n
        _(—Å—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 5 –º–∏–Ω)_''')

        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton('–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', url='https://www.yandex.ru')],
                             [InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='–ó–∞–≤–µ—Ä—à–∏—Ç—å')]]
        )
        update.message.reply_text(
            text,
            parse_mode='markdown',
            reply_markup=reply_markup,
        )
        return States.REQUEST
    elif 'login' in user_status:
        user_link = user_status['login']
        text = f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç\n_(–¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω)_\n\n[{user_link}]({user_link})'
        update.message.reply_text(text, parse_mode='markdown')

    return main_menu(update, context)


def send_email(update, context):
    keyboard = [
        ['‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'],
        ['‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞',
        reply_markup=reply_markup,
    )

    return States.MAIN


def cancel(update, context):
    username = update.effective_user.first_name
    logger.info(f'User {username} canceled the conversation.')
    update.message.reply_text('–î–æ –≤—Å—Ç—Ä–µ—á–∏!',
                              reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


def error(update, error):
    """Log Errors caused by Updates."""
    logger.warning(f'Update "{update}" caused error "{error}"')


def main():
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
    env = Env()
    env.read_env()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            States.MAIN: [
                MessageHandler(Filters.regex(r'^‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç$'), phone_request),
                MessageHandler(Filters.regex(r'^‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º$'), send_email),
            ],
            States.REQUEST: [
                CallbackQueryHandler(main_menu, pattern=r'^–ó–∞–≤–µ—Ä—à–∏—Ç—å$'),
                MessageHandler(Filters.contact, get_api_respone),
                MessageHandler(Filters.regex(r'^–ì–æ—Å—Ç–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–±–µ–∑ –≤—Ö–æ–¥–∞)$'), main_menu),
                MessageHandler(Filters.regex(r'^–û—Ç–º–µ–Ω–∞$'), main_menu),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    while True:
        try:
            updater = Updater(token=env.str('TG_BOT_TOKEN'))
            dp = updater.dispatcher
            dp.add_handler(conv_handler)
            dp.add_error_handler(error)
            dp.bot_data = {
                'api_url': env.str('API_URL'),
            }
            updater.start_polling()
            updater.idle()
        except Exception:
            logger.exception('–û—à–∏–±–∫–∞ –≤ simple-reg-bot. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.')
            sleep(5)


if __name__ == '__main__':
    main()