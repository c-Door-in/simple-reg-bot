from datetime import datetime
from email.policy import default
from textwrap import dedent

import requests
from enum import Enum, auto
from environs import Env
from time import sleep
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler

import logging

logger = logging.getLogger(__name__)


class States(Enum):
    MAIN = auto()
    REQUEST = auto()
    WRITE_TO_US = auto()
    MESSAGE_TO_ADMIN = auto()


def phone_request(update, context):
    keyboard = [
        [KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)],
        ['–ì–æ—Å—Ç–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ (–±–µ–∑ –≤—Ö–æ–¥–∞)', '–û—Ç–º–µ–Ω–∞'],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ, –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
        reply_markup=reply_markup,
    )

    return States.REQUEST


def main_menu(update, context):
    keyboard = [
        ['‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'],
        ['‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_message(
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!',
        chat_id=update.effective_chat.id,
        reply_markup=reply_markup,
    )

    return States.MAIN


def start(update, context):
    if not 'phone_number' in context.user_data:
        return phone_request(update, context)
    return main_menu(update, context)


def get_api_respone(update, context):
    phone_number = context.user_data['phone_number']
    chat_id = update.message.chat_id
    username = update.message.chat.username

    api_url = context.bot_data['api_url']
    payload = {
         'phone': phone_number,
         'chat_id': chat_id,
         'username': username
    }
    response = requests.post(api_url, data=payload)
    response.raise_for_status()
    user_status = response.json()
    if 'register' in user_status:
        user_link = user_status['register']
        text = dedent('''
            üì± –ü–æ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n
            –ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ *—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é* –∏ –Ω–∞ 
            *–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ/—Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞* üëá\n
            _(—Å—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 5 –º–∏–Ω)_'''
        )
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton('–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', url='https://ya.ru')],
                             [InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='–ó–∞–≤–µ—Ä—à–∏—Ç—å')]]
        )
        update.message.reply_text(
            text,
            parse_mode='markdown',
            reply_markup=reply_markup,
        )
        return States.REQUEST
    elif 'login' in user_status:
        user_link = user_status['login']
        text = f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç\n_(–¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω_\n\n[{user_link}](https://ya.ru)'
        update.message.reply_text(text, parse_mode='markdown')

    return main_menu(update, context)


def get_guest_link(update, context):
    api_guest_url = context.bot_data['api_guest_url']
    response = requests.get(api_guest_url)
    guest_url = response.json()['url']
    text = f'–í–æ—Ç –≥–æ—Å—Ç–µ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç\n_(–¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω_\n\n[{guest_url}]({guest_url})'
    update.message.reply_text(text, parse_mode='markdown')

    return start(update, context)


def handle_new_phonenumber(update, context):
    context.user_data['phone_number'] = update.message.contact.phone_number
    return get_api_respone(update, context)


def write_to_us(update, context):
    text ='–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:'
    reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞', callback_data='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞'),
                InlineKeyboardButton('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç', callback_data='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç')
            ],
            [
                InlineKeyboardButton('–ó–∞–±—ã–ª(–∞) –ø–∞—Ä–æ–ª—å', callback_data='–ó–∞–±—ã–ª(–∞) –ø–∞—Ä–æ–ª—å'),
                InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='–î—Ä—É–≥–æ–µ')
            ],
        ],
    )
    update.message.reply_text(
        text,
        parse_mode='markdown',
        reply_markup=reply_markup,
    )
    return States.WRITE_TO_US


def choose_topic(update, context):
    topic = update.callback_query.data
    context.user_data['topic'] = topic
    keyboard = [
        ['‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'],
        ['‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_message(
        text=f'–¢–µ–º–∞: {topic}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:',
        chat_id=update.effective_chat.id,
        parse_mode='markdown',
        reply_markup=reply_markup,
    )

    return States.MESSAGE_TO_ADMIN



def send_message_to_admin(update, context):
    if not 'phone_number' in context.user_data:
        phone = '–ù–µ —É–∫–∞–∑–∞–Ω'
    else:
        phone = context.user_data['phone_number']
    topic = context.user_data['topic']

    message = dedent(f'''
        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {str(datetime.now())}
        chat id: {update.message.chat_id}
        username: {update.message.chat.username}
        phone: {phone}
        –¢–µ–º–∞: {topic}
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}'''
    )

    if context.bot_data['admin_chat_id']:
        context.bot.send_message(
            text=message,
            chat_id=context.bot_data['admin_chat_id'],
        )

    update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–æ—Å–ª–∞–Ω–æ.')
    return start(update, context)


def cancel(update, context):
    username = update.effective_user.first_name
    logger.info(f'User {username} canceled the conversation.')
    update.message.reply_text('–î–æ –≤—Å—Ç—Ä–µ—á–∏!',
                              reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


def error(update, error):
    """Log Errors caused by Updates."""
    logger.warning(f'Update "{update}" caused error "{error}"')


def main():
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.DEBUG)
    env = Env()
    env.read_env()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            States.MAIN: [
                MessageHandler(Filters.regex(r'^‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç$'), get_api_respone),
                MessageHandler(Filters.regex(r'^‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º$'), write_to_us),
            ],
            States.REQUEST: [
                MessageHandler(Filters.regex(r'^‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç$'), get_api_respone),
                MessageHandler(Filters.regex(r'^‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º$'), write_to_us),
                CallbackQueryHandler(start, pattern=r'^–ó–∞–≤–µ—Ä—à–∏—Ç—å$'),
                MessageHandler(Filters.contact, handle_new_phonenumber),
                MessageHandler(Filters.regex(r'^–ì–æ—Å—Ç–µ–≤–∞—è —Å—Å—ã–ª–∫–∞'), get_guest_link),
                MessageHandler(Filters.regex(r'^–û—Ç–º–µ–Ω–∞$'), start),
            ],
            States.WRITE_TO_US: [
                CallbackQueryHandler(choose_topic),
                MessageHandler(Filters.regex(r'^‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç$'), get_api_respone),
                MessageHandler(Filters.regex(r'^‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º$'), write_to_us),
            ],
            States.MESSAGE_TO_ADMIN: [
                MessageHandler(Filters.regex(r'^‚û° –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç$'), get_api_respone),
                MessageHandler(Filters.regex(r'^‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º$'), write_to_us),
                MessageHandler(Filters.text, send_message_to_admin),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    while True:
        try:
            updater = Updater(token=env.str('TG_BOT_TOKEN'))
            dp = updater.dispatcher
            dp.add_handler(conv_handler)
            dp.add_error_handler(error)
            dp.bot_data = {
                'api_url': env.str('API_URL'),
                'api_guest_url': env.str('API_GUEST_URL'),
                'admin_chat_id': env.str('ADMIN_CHAT_ID', default=None)
            }
            updater.start_polling()
            updater.idle()
        except Exception:
            logger.exception('–û—à–∏–±–∫–∞ –≤ simple-reg-bot. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.')
            sleep(5)


if __name__ == '__main__':
    main()